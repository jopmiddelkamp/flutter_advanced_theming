import 'package:flutter/material.dart';

import '../../../src.dart';

class Pill extends StatefulWidget {
  const Pill({
    super.key,
    required this.child,
    this.onPressed,
    this.backgroundColor,
    this.foregroundColor,
    this.textStyle,
    this.padding,
    this.side,
    this.duration,
  });

  final Widget? child;
  final VoidCallback? onPressed;

  final ActiveMaterialStateProperty<Color>? backgroundColor;
  final ActiveMaterialStateProperty<Color>? foregroundColor;
  final ActiveMaterialStateProperty<TextStyle>? textStyle;
  final ActiveMaterialStateProperty<EdgeInsetsGeometry>? padding;
  final ActiveMaterialStateProperty<BorderSide>? side;
  final Duration? duration;

  bool get enabled => onPressed != null;

  @override
  State<Pill> createState() => _PillState();
}

class _PillState extends State<Pill>
    with MaterialStateMixin, TickerProviderStateMixin {
  AnimationController? _controller;
  Color? _backgroundColor;

  @override
  void initState() {
    super.initState();
    setMaterialState(MaterialState.disabled, !widget.enabled);
  }

  @override
  void dispose() {
    _controller?.dispose();
    super.dispose();
  }

  @override
  void didUpdateWidget(covariant Pill oldWidget) {
    super.didUpdateWidget(oldWidget);
    setMaterialState(MaterialState.disabled, !widget.enabled);
    // If the button is disabled while a press gesture is currently ongoing,
    // InkWell makes a call to handleHighlightChanged. This causes an exception
    // because it calls setState in the middle of a build. To preempt this, we
    // manually update pressed to false when this situation occurs.
    if (isDisabled && isPressed) {
      removeMaterialState(MaterialState.pressed);
    }
  }

  @override
  Widget build(
    BuildContext context,
  ) {
    final colorScheme = CustomColorScheme.of(context);
    final textTheme = CustomTextTheme.of(context);
    final theme = _getTheme(context, colorScheme, textTheme);

    var backgroundColor = _getBackgroundColor(theme);
    final foregroundColor = _getForegroundColor(theme);
    final padding = _getPadding(theme);
    final side = _getSide(theme);
    final textStyle = _getTextStyle(theme, textTheme);
    final animationDuration =
        widget.duration ?? const Duration(milliseconds: 200);

    if (animationDuration > Duration.zero &&
        _backgroundColor != null &&
        _backgroundColor!.value != backgroundColor.value &&
        _backgroundColor!.opacity == 1 &&
        backgroundColor.opacity < 1) {
      if (_controller?.duration != animationDuration) {
        _controller?.dispose();
        // does this not belong into the did update widget?
        _controller = AnimationController(
          duration: animationDuration,
          vsync: this,
        )..addStatusListener((status) {
            if (status == AnimationStatus.completed) {
              // Rebuild with the final background color.
              setState(() {});
            }
          });
      }
      // Defer changing the background color.
      backgroundColor = _backgroundColor!;
      _controller!.value = 0;
      _controller!.forward();
    }
    _backgroundColor = backgroundColor;

    final shape = RoundedRectangleBorder(
      borderRadius: BorderRadius.all(
        Radius.circular(
          // Should be generated by render box but out of scope for example.
          padding.vertical + textStyle.fontSize!,
        ),
      ),
    );

    final result = IconTheme.merge(
      data: IconThemeData(color: foregroundColor),
      child: DefaultTextStyle.merge(
        style: TextStyle(color: foregroundColor),
        child: Material(
          elevation: 0,
          color: backgroundColor,
          textStyle: textStyle,
          shape: shape.copyWith(
            side: side,
          ),
          type: MaterialType.button,
          animationDuration: animationDuration,
          child: InkWell(
            onTap: widget.onPressed,
            highlightColor: Colors.transparent,
            customBorder: shape,
            canRequestFocus: widget.enabled,
            child: Padding(
              padding: padding,
              child: widget.child,
            ),
          ),
        ),
      ),
    );

    return Semantics(
      container: true,
      button: true,
      enabled: widget.enabled,
      child: result,
    );
  }

  Color _getBackgroundColor(
    PillTheme theme,
  ) {
    return resolve(
      widget.backgroundColor,
      theme.backgroundColor,
      materialStates,
    );
  }

  Color _getForegroundColor(
    PillTheme theme,
  ) {
    return resolve(
      widget.foregroundColor,
      theme.foregroundColor,
      materialStates,
    );
  }

  EdgeInsetsGeometry _getPadding(
    PillTheme theme,
  ) {
    return resolve(
      widget.padding,
      theme.padding,
      materialStates,
    );
  }

  BorderSide _getSide(
    PillTheme theme,
  ) {
    return resolve(
      widget.side,
      theme.side,
      materialStates,
    );
  }

  TextStyle _getTextStyle(
    PillTheme theme,
    CustomTextTheme textTheme,
  ) {
    return resolve(
      widget.textStyle,
      theme.textStyle,
      materialStates,
    );
  }

  PillTheme _getTheme(
    BuildContext context,
    CustomColorScheme colorScheme,
    CustomTextTheme textTheme,
  ) {
    final customTheme = CustomTheme.of(context);
    return customTheme.pillTheme ??
        PillTheme(
          colorScheme: colorScheme,
          textTheme: textTheme,
        );
  }
}
